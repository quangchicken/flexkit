/**
 * VERSION: 0.2.2
 * UPDATED: Dec 10, 2020
**/

WSAIO.init = function(l) {
  function n(b) {
    if (-1 < "log info error warn Log Info Error Warn".split(" ").indexOf(a.log)) {
      console[a.log.toLowerCase()]("WSAIO " + a.log.toUpperCase() + " LOG!", b);
    }
  }
  function r(b) {
    if (-1 < "log info error warn Log Info Error Warn".split(" ").indexOf(a.errorLog)) {
      console[a.errorLog]("WSAIO ERROR LOG!", b);
    }
  }
  var a = this;
  WSAIO.DiscountCode = {};
  a.applied_tag = "all";
  "undefined" === typeof WSAIO.Currency && (WSAIO.Currency = {});
  Array.prototype.findIndex || Object.defineProperty(Array.prototype, "findIndex", {value:function(b, f) {
    if (null == this) {
      throw new TypeError('"this" is null or not defined');
    }
    var d = Object(this), e = d.length >>> 0;
    if ("function" !== typeof b) {
      throw new TypeError("predicate must be a function");
    }
    for (var c = 0; c < e;) {
      if (b.call(f, d[c], c, d)) {
        return c;
      }
      c++;
    }
    return -1;
  }, configurable:!0, writable:!0});
  Array.prototype.indexOf || (Array.prototype.indexOf = function(b, f) {
    if (null == this) {
      throw new TypeError('"this" is null or not defined');
    }
    var d = Object(this), e = d.length >>> 0;
    if (0 === e) {
      return -1;
    }
    var c = f | 0;
    if (c >= e) {
      return -1;
    }
    for (c = Math.max(0 <= c ? c : e - Math.abs(c), 0); c < e; c++) {
      if (c in d && d[c] === b) {
        return c;
      }
    }
    return -1;
  });
  Array.prototype.find || Object.defineProperty(Array.prototype, "find", {value:function(b, f) {
    if (null == this) {
      throw TypeError('"this" is null or not defined');
    }
    var d = Object(this), e = d.length >>> 0;
    if ("function" !== typeof b) {
      throw TypeError("predicate must be a function");
    }
    for (var c = 0; c < e;) {
      var g = d[c];
      if (b.call(f, g, c, d)) {
        return g;
      }
      c++;
    }
  }, configurable:!0, writable:!0});
  WSAIO.mF = function(b) {
    if (isNaN(b) || null == b) {
      return 0;
    }
    b = b.toString();
    if ("string" == typeof b && -1 < b.indexOf(".")) {
      return 2 > b.split(".")[1].length ? Number(b).toFixed(2).toString() : b.toString();
    }
    b = (Number(b) / 100).toFixed(2);
    return b.toString();
  };
  WSAIO.formatMoney = function(b, f) {
    function d(h, k, p, q) {
      p = p || ",";
      q = q || ".";
      if (isNaN(h) || null === h) {
        return 0;
      }
      h = (h / 100).toFixed(k);
      h = h.split(".");
      return h[0].replace(/(d)(?=(ddd)+(?!d))/g, "$1" + p) + (h[1] ? q + h[1] : "");
    }
    "string" === typeof b && (b = b.replace(".", ""));
    var e = "", c = /\{\{\s*(\w+)\s*\}\}/, g = f || a.shopInfo.money_format || "${{amount}}";
    switch(g.match(c)[1]) {
      case "amount":
        e = d(b, 2);
        break;
      case "amount_no_decimals":
        e = d(b, 0);
        break;
      case "amount_with_comma_separator":
        e = d(b, 2, ".", ",");
        break;
      case "amount_no_decimals_with_comma_separator":
        e = d(b, 0, ".", ",");
        break;
      case "amount_no_decimals_with_space_separator":
        e = d(b, 0, " ");
        break;
      case "amount_with_apostrophe_separator":
        e = d(b, 2, "'");
    }
    return g.replace(c, e);
  };
  WSAIO.displayTable = function(b, f) {
    if ("undefined" === typeof f) {
      return r("Volume discount table selector for product page was not defined.");
    }
    if (-1 < f.indexOf(":")) {
      var d = f.split(":")[1], e = f.split(":")[0];
      switch(d) {
        case "append":
          l(e).append(b);
          break;
        case "prepend":
          l(e).prepend(b);
          break;
        case "before":
          l(b).insertBefore(e);
          break;
        case "after":
          l(b).insertAfter(e);
          break;
        default:
          l(e).html(b);
      }
    } else {
      l(f).html(b);
    }
  };
  WSAIO.alterHTML = function(b, f) {
    if ("undefined" === typeof f) {
      return r("Selector was not defined.");
    }
    if (-1 < f.indexOf(":")) {
      var d = f.split(":")[1], e = f.split(":")[0];
      switch(d) {
        case "append":
          l(e).append(b);
          break;
        case "prepend":
          l(e).prepend(b);
          break;
        case "before":
          l(b).insertBefore(e);
          break;
        case "after":
          l(b).insertAfter(e);
          break;
        default:
          l(e).html(b);
      }
    } else {
      l(f).html(b);
    }
  };
  WSAIO.DiscountCode.addForm = function(b, f) {
    a.alterHTML(b || a.discount_code_form_html, f || a.discount_code_field_selector);
  };
  WSAIO.DiscountCode.toggle = function(b) {
    "undefined" === typeof b && (b = "show");
    -1 < a.discount_code_field_selector.indexOf(":") ? "show" === b ? l(a.discount_code_field_selector.split(":")[0]).show() : l(a.discount_code_field_selector.split(":")[0]).hide() : "show" === b ? l(a.discount_code_field_selector).show() : l(a.discount_code_field_selector).hide();
  };
  WSAIO.checkCustomer = function(b, f, d) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    switch(b) {
      case "has_tag":
        if (a.customer.id) {
          d = f.indexOf("all");
          var e = f.indexOf("has_account");
          b = [];
          try {
            b = f.map(function(c) {
              return -1 < a.customer.tags.findIndex(function(g) {
                return c.toLowerCase() === g;
              });
            });
          } catch (c) {
          }
          return -1 < b.indexOf(!0) ? (a.applied_tag = f[b.indexOf(!0)], -1 < b.indexOf(!0)) : -1 < d ? !0 : -1 < e ? (a.applied_tag = "has_account", !0) : -1 < b.indexOf(!0);
        }
        d = f.indexOf("all");
        return -1 < f.indexOf("no_account") ? (a.applied_tag = "no_account", !0) : -1 < d ? !0 : !1;
      case "has_account":
        a.applied_tag = "has_account";
        if (a.customer.id) {
          b = [];
          try {
            b = d.map(function(c) {
              return -1 < a.customer.tags.findIndex(function(g) {
                return c.toLowerCase() === g;
              });
            });
          } catch (c) {
          }
          -1 < b.indexOf(!0) && (a.excluded_tag = d[b.indexOf(!0)]);
          return -1 === b.indexOf(!0);
        }
        return !1;
      case "no_account":
        return a.applied_tag = "no_account", a.customer.id ? !1 : !0;
      case "all":
        if (a.customer.id) {
          b = [];
          try {
            b = d.map(function(c) {
              return -1 < a.customer.tags.findIndex(function(g) {
                return c.toLowerCase() === g;
              });
            });
          } catch (c) {
          }
          -1 < b.indexOf(!0) && (a.excluded_tag = d[b.indexOf(!0)]);
          return -1 === b.indexOf(!0);
        }
        return !0;
      default:
        if (a.customer.id) {
          b = [];
          try {
            b = d.map(function(c) {
              return -1 < a.customer.tags.findIndex(function(g) {
                return c.toLowerCase() === g;
              });
            });
          } catch (c) {
          }
          -1 < b.indexOf(!0) && (a.excluded_tag = d[b.indexOf(!0)]);
          return -1 === b.indexOf(!0);
        }
        return !0;
    }
  };
  WSAIO.checkAppliesTo = function(b) {
    function f() {
      if (WSAIO["debugger"]) {
        debugger;
      }
      if ("undefined" !== typeof a.selected_product.handle || "undefined" !== typeof a.selected_product.id) {
        var h = b.rule.products.findIndex(function(k) {
          return k.handle === a.selected_product.handle || k.id == a.selected_product.id;
        });
        -1 < h && ("regular_discount" === b.module ? (!0 === b.rule.products[h].variant_level && (a.productRd = []), a.productRd.push(b.rule)) : (!0 === b.rule.products[h].variant_level && (a.productVd = []), a.productVd.push(b.rule)));
      } else {
        r("Selected product handle is not defined.");
      }
    }
    function d() {
      if (WSAIO["debugger"]) {
        debugger;
      }
      var h = [!1];
      a.selected_product.handle ? (h = !1, b.rule.exclude_products && -1 < b.rule.exclude_products.findIndex(function(k) {
        return k.handle == a.selected_product.handle;
      }) && (h = !0), h || (h = b.rule.collections.map(function(k, p) {
        return -1 < a.product_in_collects.findIndex(function(q) {
          return (q.product_handle == a.selected_product.handle || q.product_id == a.selected_product.id) && q.collection_id == k.id;
        });
      }), -1 < h.indexOf(!0) && ("regular_discount" === b.module ? a.productRd.push(b.rule) : a.productVd.push(b.rule)))) : "collection" === a.template && a.selected_collection.id ? (h = b.rule.collections.map(function(k, p) {
        return k.id == a.selected_collection.id;
      }), -1 < h.indexOf(!0) && ("regular_discount" === b.module ? a.productRd.push(b.rule) : a.productVd.push(b.rule))) : r("Missing either product's id or collection's id or template is not set for collections");
    }
    if (WSAIO["debugger"]) {
      debugger;
    }
    switch(b.type) {
      case "products":
        b.rule.priority = 1;
        f();
        break;
      case "collections":
        b.rule.priority = 2;
        d();
        break;
      case "entire_store":
        var e = !1;
        b.rule.exclude_products && -1 < b.rule.exclude_products.findIndex(function(h) {
          return h.handle == a.selected_product.handle;
        }) && (e = !0);
        if (b.rule.exclude_collections && 0 < b.rule.exclude_collections.length) {
          for (var c = 0; c < a.product_in_collects.length; c++) {
            var g = a.product_in_collects[c];
            -1 < b.rule.exclude_collections.findIndex(function(h) {
              return h.id == g.collection_id;
            }) && a.selected_product.id == g.product_id && (e = !0);
          }
        }
        e || (b.rule.priority = 3, "regular_discount" === b.module ? a.productRd.push(b.rule) : a.productVd.push(b.rule));
        break;
      default:
        b.rule.priority = 3, "regular_discount" === b.module ? a.productRd.push(b.rule) : a.productVd.push(b.rule);
    }
    "regular_discount" === b.module ? a.productRd && 1 < a.productRd.length && (-1 < a.productRd.findIndex(function(h) {
      return !0 === h.individual_product;
    }) ? a.productRd = a.productRd.filter(function(h) {
      return !0 === h.individual_product;
    }) : -1 < a.productRd.findIndex(function(h) {
      return "has_tag" === h.customer_group;
    }) ? a.productRd = a.productRd.filter(function(h) {
      return "has_tag" === h.customer_group;
    }) : -1 < a.productRd.findIndex(function(h) {
      return "has_tag" === h.customer_group;
    }) ? a.productRd = a.productRd.filter(function(h) {
      return "has_tag" === h.customer_group;
    }) : -1 < a.productRd.findIndex(function(h) {
      return "has_account" === h.customer_group;
    }) ? a.productRd = a.productRd.filter(function(h) {
      return "has_account" === h.customer_group;
    }) : -1 < a.productRd.findIndex(function(h) {
      return "no_account" === h.customer_group;
    }) && (a.productRd = a.productRd.filter(function(h) {
      return "no_account" === h.customer_group;
    }))) : a.productVd && 1 < a.productVd.length && (-1 < a.productVd.findIndex(function(h) {
      return !0 === h.individual_product;
    }) ? a.productVd = a.productVd.filter(function(h) {
      return !0 === h.individual_product;
    }) : -1 < a.productVd.findIndex(function(h) {
      return "has_tag" === h.customer_group;
    }) ? a.productVd = a.productVd.filter(function(h) {
      return "has_tag" === h.customer_group;
    }) : -1 < a.productVd.findIndex(function(h) {
      return "has_account" === h.customer_group;
    }) ? a.productVd = a.productVd.filter(function(h) {
      return "has_account" === h.customer_group;
    }) : -1 < a.productVd.findIndex(function(h) {
      return "no_account" === h.customer_group;
    }) && (a.productVd = a.productVd.filter(function(h) {
      return "no_account" === h.customer_group;
    })));
  };
  WSAIO.volumeDiscount = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    "function" === typeof b && (f = b);
    a.output = !0;
    a.remove_duplicate_table = !1;
    a.selected_variant = JSON.parse(JSON.stringify(a.current_variant));
    a.selected_product = JSON.parse(JSON.stringify(a.current_product));
    a.selected_collection = JSON.parse(JSON.stringify(a.current_collection));
    "object" === typeof b && ("undefined" !== typeof b.product_id && "default" !== b.product_id && (a.selected_product.id = b.product_id), "undefined" !== typeof b.product_handle && "default" !== b.product_handle && (a.selected_product.handle = b.product_handle), "undefined" !== typeof b.variant_id && "default" !== b.variant_id && (a.selected_variant.id = b.variant_id), "undefined" !== typeof b.variant_sku && "default" !== b.variant_sku && (a.selected_variant.sku = b.variant_sku), "undefined" !== 
    typeof b.variant_price && "default" !== b.variant_price && (a.selected_variant.price = b.variant_price), "undefined" !== typeof b.variant_compare_at_price && "default" !== b.variant_compare_at_price && (a.selected_variant.compare_at_price = b.variant_compare_at_price), "undefined" !== typeof b.collection_id && "default" !== b.collection_id && (a.selected_collection.id = b.collection_id), "undefined" !== typeof b.output && "default" !== b.output && (a.output = b.output), "undefined" !== typeof b.qb_table_selector && 
    "default" !== b.qb_table_selector && (a.product_qb_table_selector = b.qb_table_selector), "undefined" !== typeof b.remove_duplicate_table && "default" !== b.remove_duplicate_table && (a.remove_duplicate_table = b.remove_duplicate_table), "undefined" !== typeof b.template && "default" !== b.template && (a.landingTemplate = b.template));
    a.selected_variant && "string" === typeof a.selected_variant.price && -1 < a.selected_variant.price.indexOf(".") && (a.selected_variant.price = a.selected_variant.price.replace(".", ""));
    a.selected_variant && "string" === typeof a.selected_variant.compare_at_price && -1 < a.selected_variant.compare_at_price.indexOf(".") && (a.selected_variant.compare_at_price = a.selected_variant.compare_at_price.replace(".", ""));
    a.productVd = [];
    for (var d = 0, e = a.volume_discounts.length; d < e; d++) {
      var c = a.volume_discounts[d];
      if ("published" === c.state && !1 !== a.checkCustomer(c.customer_group, c.tags, c.tags_excluded)) {
        if (c.schedule_active) {
          var g = a.getSchedule(c.schedule);
          n("_schedule", g);
          if (g.ends_in) {
            if (0 >= Number(g.ends_in.years) && 0 >= Number(g.ends_in.months) && 0 >= Number(g.ends_in.days) && 0 >= Number(g.ends_in.hours) && 0 >= Number(g.ends_in.minutes) && 0 >= Number(g.ends_in.seconds)) {
              n("This rule was expired", g);
              continue;
            }
            if (0 <= Number(g.started.years) && 0 <= Number(g.started.months) && 0 <= Number(g.started.days) && 0 <= Number(g.started.hours) && 0 <= Number(g.started.minutes) && 0 <= Number(g.started.seconds)) {
              n("This rule was schedules and will be started in", g);
              continue;
            }
          }
        }
        a.checkAppliesTo({type:c.applies_to, rule:c, module:"volume_discount"});
      }
    }
    0 < a.productVd.length && (a.productVd.sort(function(t, u) {
      return Number(t.priority) - Number(u.priority);
    }), -1 < a.productVd.findIndex(function(t) {
      return "products" == t.applies_to;
    }) ? a.productVd = a.productVd.filter(function(t) {
      return "products" === t.applies_to;
    }) : -1 < a.productVd.findIndex(function(t) {
      return "collections" == t.applies_to;
    }) && (a.productVd = a.productVd.filter(function(t) {
      return "collections" === t.applies_to;
    })));
    a.product_qb = [];
    a.product_volume_discount = {};
    a.vd_has_discount = !1;
    a.productVd && 1 < a.productVd.length && (a.productVd = [a.productVd[0]]);
    a.volumeDiscountPriority();
    if (a.productVd && 0 < a.productVd.length) {
      for (a.vd_has_discount = !0, d = 0, e = a.productVd.length; d < e; d++) {
        if (c = a.productVd[d], "products" === c.applies_to && !0 === c.individual_product) {
          for (g = 0; g < c.products.length; g++) {
            var h = c.products[g];
            if (h.handle === a.selected_product.handle || h.id == a.selected_product.id) {
              if (a.product_volume_discount.handle !== h.handle && (a.product_volume_discount = JSON.parse(JSON.stringify(c)), a.product_volume_discount.product = h), h.variant_level) {
                for (var k = 0; k < h.variants.length; k++) {
                  var p = h.variants[k], q = p.tag_options.findIndex(function(t) {
                    return t.name.toString().toLowerCase() == a.applied_tag.toString().toLowerCase();
                  });
                  if (-1 < q && p.id == a.selected_variant.id || p.sku == a.selected_variant.sku && !a.variant_sku_are_same) {
                    q = p.tag_options[q], a.product_qb.push({name:q.name, value:q.value, type:q.type, qty:p.quantity});
                  }
                }
              } else {
                k = h.tag_options.findIndex(function(t) {
                  return t.name.toString().toLowerCase() == a.applied_tag.toString().toLowerCase();
                }), -1 < k && (k = h.tag_options[k], a.product_qb.push({name:k.name, value:k.value, type:k.type, qty:h.quantity}));
              }
            }
          }
        } else {
          for (g = 0; g < c.volume_discount.length; g++) {
            h = c.volume_discount[g], a.product_qb.push({name:c.applies_to, value:h.value, type:c.discount_type, qty:h.qty});
          }
          a.product_volume_discount = JSON.parse(JSON.stringify(c));
          "collections" === c.applies_to && (a.product_volume_discount.collections = a.product_volume_discount.collections.filter(function(t) {
            return t.id == a.selected_collection.id;
          }));
        }
      }
    }
    a.product_volume_discount.volume_discount = JSON.parse(JSON.stringify(a.product_qb));
    if (a.output && a.vd_has_discount) {
      if ("product" === a.landingTemplate) {
        switch(a.remove_duplicate_table && l(".wholesale-table").remove(), "undefined" === typeof a.product_volume_discount && r("Volume discount table could not created. Because the rule is empty or not defined. Reference variable is WSAIO.product_volume_discount."), a.product_volume_discount.display_option) {
          case "detailed_grid":
            a.detailed_grid_table(a.product_volume_discount, b);
            break;
          case "basic_grid":
            a.basic_grid_table(a.product_volume_discount, b);
            break;
          case "grid_range":
            a.grid_range_table(a.product_volume_discount, b);
            break;
          case "detailed_grid_percent":
            a.detailed_grid_percent_table(a.product_volume_discount, b);
            break;
          case "percent_grid":
            a.percent_grid_table(a.product_volume_discount, b);
            break;
          case "grid_range_alternate":
            a.grid_range_alternate_table(a.product_volume_discount, b);
            break;
          default:
            a.grid_range_alternate_table(a.product_volume_discount, b);
        }
      } else {
        d = [];
        for (e = 0; e < a.product_volume_discount.volume_discount.length; e++) {
          d.push(Number(a.product_volume_discount.volume_discount[e].value));
        }
        e = Math.min.apply(null, d);
        var m = Math.max.apply(null, d);
        n("Min discount: " + e);
        n("Max discount: " + m);
        d = a.product_volume_discount.volume_discount.findIndex(function(t) {
          return t.value == m;
        });
        if (-1 < d) {
          d = a.product_volume_discount.volume_discount[d];
          e = Number(a.mF(a.selected_variant.price));
          c = a.get_discount(e, d.type, d.value);
          if (0 == Number(c) || 0 == Number(e)) {
            a.vd_has_discount = !1;
          }
          if (a.vd_has_discount) {
            d = Number(a.mF(a.selected_variant.price));
            a.general_settings.show_compare_at_price && (d = Number(a.mF(a.selected_variant.compare_at_price)));
            if (isNaN(a.selected_variant.compare_at_price) || Number(a.selected_variant.compare_at_price) <= Number(a.selected_variant.price)) {
              d = 0, Number(e) - Number(c) < Number(e) && (d = Number(e).toFixed(2));
            }
            e = a.formatMoney((Number(e) - Number(c)).toFixed(2));
            d = a.formatMoney(Number(d).toFixed(2));
            1 > Number(d) && (d = "");
            a.general_settings.compare_at_price || (d = "");
            c = "";
            c = "product" === a.template ? a.product_price_html : a.hcsr_qb_price_html;
            try {
              d = d.replace("$", "$@"), e = e.replace("$", "$@");
            } catch (t) {
              n(t);
            }
            c = c.replace(RegExp("%regular_price%", "gi"), a.Lang.from + " " + e).replace(RegExp("%compare_at_price%", "gi"), d);
            try {
              c = c.replace(/@/g, "");
            } catch (t) {
              n(t);
            }
            a.product_id_selector && a.selected_product.id ? a.alterHTML(c, a.product_id_selector.replace("%id%", a.selected_product.id)) : r("Product selector/id not defined");
            try {
              l(a.product_id_selector.replace("%id%", a.selected_product.id).split(":")[0]).removeClass(el.replace(".", ""));
            } catch (t) {
            }
            a.saleClock(a.product_volume_discount, a.selected_product, "vd");
          }
        }
      }
    }
    "function" === typeof a.callback && a.callback({product_volume_discount:a.product_volume_discount, quantity_breaks:a.product_qb, product:a.selected_product, variant:a.selected_variant});
    "function" === typeof f && f({product_volume_discount:a.product_volume_discount, quantity_breaks:a.product_qb, product:a.selected_product, variant:a.selected_variant});
  };
  WSAIO.regularDiscount = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    "function" === typeof b && (f = b);
    a.output = !0;
    a.selected_variant = JSON.parse(JSON.stringify(a.current_variant));
    a.selected_product = JSON.parse(JSON.stringify(a.current_product));
    a.selected_collection = JSON.parse(JSON.stringify(a.current_collection));
    "object" === typeof b && ("undefined" !== typeof b.product_id && "default" !== b.product_id && (a.selected_product.id = b.product_id), "undefined" !== typeof b.product_handle && "default" !== b.product_handle && (a.selected_product.handle = b.product_handle), "undefined" !== typeof b.variant_id && "default" !== b.variant_id && (a.selected_variant.id = b.variant_id), "undefined" !== typeof b.variant_sku && "default" !== b.variant_sku && (a.selected_variant.sku = b.variant_sku), "undefined" !== 
    typeof b.variant_price && "default" !== b.variant_id && (a.selected_variant.price = b.variant_price), "undefined" !== typeof b.variant_compare_at_price && "default" !== b.variant_sku && (a.selected_variant.compare_at_price = b.variant_compare_at_price), "undefined" !== typeof b.collection_id && "default" !== b.collection_id && (a.selected_collection.id = b.collection_id), "undefined" !== typeof b.output && "default" !== b.output && (a.output = b.output), "undefined" !== typeof b.template && "default" !== 
    b.template && (a.landingTemplate = b.template));
    a.selected_variant && "string" === typeof a.selected_variant.price && -1 < a.selected_variant.price.indexOf(".") && (a.selected_variant.price = a.selected_variant.price.replace(".", ""));
    a.selected_variant && "string" === typeof a.selected_variant.compare_at_price && -1 < a.selected_variant.compare_at_price.indexOf(".") && (a.selected_variant.compare_at_price = a.selected_variant.compare_at_price.replace(".", ""));
    a.productRd = [];
    for (var d = 0, e = a.regular_discounts.length; d < e; d++) {
      var c = a.regular_discounts[d];
      if ("published" === c.state && !1 !== a.checkCustomer(c.customer_group, c.tags, c.tags_excluded)) {
        if (c.schedule_active) {
          var g = a.getSchedule(c.schedule);
          n("_schedule", g);
          if (g.ends_in) {
            if (0 >= Number(g.ends_in.years) && 0 >= Number(g.ends_in.months) && 0 >= Number(g.ends_in.days) && 0 >= Number(g.ends_in.hours) && 0 >= Number(g.ends_in.minutes) && 0 >= Number(g.ends_in.seconds)) {
              n("This rule was expired", g);
              continue;
            }
            if (0 <= Number(g.started.years) && 0 <= Number(g.started.months) && 0 <= Number(g.started.days) && 0 <= Number(g.started.hours) && 0 <= Number(g.started.minutes) && 0 <= Number(g.started.seconds)) {
              n("This rule was schedules and will be started in", g);
              continue;
            }
          }
        }
        a.checkAppliesTo({type:c.applies_to, rule:c, module:"regular_discount"});
      }
    }
    0 < a.productRd.length && (a.productRd.sort(function(m, t) {
      return Number(m.priority) - Number(t.priority);
    }), -1 < a.productRd.findIndex(function(m) {
      return "products" == m.applies_to;
    }) ? a.productRd = a.productRd.filter(function(m) {
      return "products" === m.applies_to;
    }) : -1 < a.productRd.findIndex(function(m) {
      return "collections" == m.applies_to;
    }) && (a.productRd = a.productRd.filter(function(m) {
      return "collections" === m.applies_to;
    })));
    a.product_rd_obj = [];
    a.product_regular_discount = {};
    a.rd_has_discount = !1;
    if (0 < a.productRd.length) {
      for (a.rd_has_discount = !0, d = 0, e = a.productRd.length; d < e; d++) {
        if (c = a.productRd[d], "products" === c.applies_to && !0 === c.individual_product) {
          for (g = 0; g < c.products.length; g++) {
            var h = c.products[g];
            if (h.handle === a.selected_product.handle || h.id == a.selected_product.id) {
              if (a.product_regular_discount.handle !== h.handle && (a.product_regular_discount = JSON.parse(JSON.stringify(c)), a.product_regular_discount.product = h), h.variant_level) {
                for (var k = 0; k < h.variants.length; k++) {
                  var p = h.variants[k], q = p.tag_options.findIndex(function(m) {
                    return m.name.toString().toLowerCase() == a.applied_tag.toString().toLowerCase();
                  });
                  -1 < q && (p.id == a.selected_variant.id || p.sku == a.selected_variant.sku && !a.variant_sku_are_same) && (p = p.tag_options[q], a.product_rd_obj.push({name:p.name, value:p.value, type:p.type}));
                }
              } else {
                k = h.tag_options.findIndex(function(m) {
                  return m.name.toString().toLowerCase() == a.applied_tag.toString().toLowerCase();
                }), -1 < k && (h = h.tag_options[k], a.product_rd_obj.push({name:h.name, value:h.value, type:h.type}));
              }
            }
          }
        } else {
          product_rd_obj = {name:c.applies_to, type:c.discount_type, value:c.discount_value}, a.product_regular_discount = JSON.parse(JSON.stringify(c)), "collections" === c.applies_to && (a.product_regular_discount.collections = a.product_regular_discount.collections.filter(function(m) {
            return m.id == a.selected_collection.id;
          }));
        }
      }
    }
    a.product_regular_discount.volume_discount = JSON.parse(JSON.stringify(a.product_rd_obj));
    if (a.output) {
      d = Number(a.mF(a.selected_variant.price));
      0 < a.product_regular_discount.volume_discount.length && (a.product_regular_discount.discount_type = a.product_regular_discount.volume_discount[0].type, a.product_regular_discount.discount_value = a.product_regular_discount.volume_discount[0].value);
      "undefined" === typeof a.product_regular_discount.discount_type && (a.rd_has_discount = !1);
      "undefined" === typeof a.product_regular_discount.discount_value && (a.rd_has_discount = !1);
      e = a.get_discount(d, a.product_regular_discount.discount_type, a.product_regular_discount.discount_value);
      if (0 == Number(e) || 0 == Number(d)) {
        a.rd_has_discount = !1;
      }
      if (a.rd_has_discount) {
        k = (Number(d) - Number(e)).toFixed(2);
        c = Number(a.mF(a.selected_variant.price));
        a.general_settings.show_compare_at_price && (c = Number(a.mF(a.selected_variant.compare_at_price)));
        if (isNaN(a.selected_variant.compare_at_price) || Number(a.selected_variant.compare_at_price) <= Number(a.selected_variant.price)) {
          c = 0, Number(d) - Number(e) < Number(d) && (c = Number(d).toFixed(2));
        }
        g = a.hcsr_price_html;
        h = a.saved_price_in_grid_html;
        "product" === a.template && (g = a.product_price_html, h = a.saved_price_html);
        k = a.saved_amount(c, k);
        h = h.replace(RegExp("%saved_amount:price%", "gi"), a.formatMoney(k.price)).replace(RegExp("%saved_amount:percentage%", "gi"), k.percentage);
        a.alterHTML(h, a.product_saved_amount_selector.replace("%id%", a.selected_product.id));
        a.product_regular_discount.total_saved = k;
        a.product_regular_discount.regular_price = (Number(d) - Number(e)).toFixed(2);
        a.product_regular_discount.compare_at_price = Number(c).toFixed(2);
        k = a.formatMoney((Number(d) - Number(e)).toFixed(2));
        c = a.formatMoney(Number(c).toFixed(2));
        1 > Number(c) && (c = "");
        a.general_settings.compare_at_price || (c = "");
        try {
          c = c.replace("$", "$@"), k = k.replace("$", "$@");
        } catch (m) {
          n(m);
        }
        g = g.replace(RegExp("%regular_price%", "gi"), k).replace(RegExp("%compare_at_price%", "gi"), c);
        l(a.product_id_selector.replace("%id%", a.selected_product.id).replace(":same", "")).removeClass("empty");
        "product" !== a.landingTemplate && "cart" !== a.landingTemplate && (g = a.hcsr_price_html.replace(RegExp("%regular_price%", "gi"), k).replace(RegExp("%compare_at_price%", "gi"), c));
        try {
          g = g.replace(/@/g, "");
        } catch (m) {
          n(m);
        }
        a.product_id_selector && a.selected_product.id ? b && b.variant_level ? a.alterHTML(g, a.variant_id_selector.replace("%id%", a.selected_variant.id)) : a.alterHTML(g, a.product_id_selector.replace("%id%", a.selected_product.id)) : r("Product selector/id not defined");
        a.saleClock(a.product_regular_discount, a.selected_product, "rd");
      }
    }
    "function" === typeof f && f({product_regular_discount:a.product_regular_discount, regular_discounts:a.product_rd_obj, product:a.selected_product, variant:a.selected_variant});
    "function" === typeof a.callback && a.callback({product_regular_discount:a.product_regular_discount, regular_discounts:a.product_rd_obj, product:a.selected_product, variant:a.selected_variant});
  };
  WSAIO.variantOriginalPrice = function() {
    if (WSAIO["debugger"]) {
      debugger;
    }
    var b = a.formatMoney(a.selected_variant.price), f = a.formatMoney(a.selected_variant.compare_at_price), d = a.hcsr_price_original_html;
    "product" === a.template && (d = a.product_price_original_html);
    Number(a.selected_variant.price) > Number(a.selected_variant.compare_at_price) && (f = "");
    null == a.selected_variant.compare_at_price && (f = "");
    1 > Number(a.selected_variant.compare_at_price) && (f = "");
    a.general_settings.compare_at_price || (f = "");
    if ("" == f) {
      try {
        l(a.product_id_selector.replace("%id%", a.selected_product.id).replace(":same", "")).addClass("empty");
      } catch (e) {
      }
    } else {
      try {
        l(a.product_id_selector.replace("%id%", a.selected_product.id).replace(":same", "")).removeClass("empty");
      } catch (e) {
      }
    }
    try {
      f = f.replace("$", "$@"), b = b.replace("$", "$@");
    } catch (e) {
      n(e);
    }
    d = d.replace(RegExp("%regular_price%", "gi"), b).replace(RegExp("%compare_at_price%", "gi"), f);
    try {
      d = d.replace(/@/g, "");
    } catch (e) {
      n(e);
    }
    a.product_id_selector && a.selected_product && a.selected_product.id ? a.alterHTML(d, a.product_id_selector.replace("%id%", a.selected_product.id)) : r("Selected variant price was not defined. Reference: WSAIO.selected_variant.price");
    l(".wholesale-table").remove();
  };
  WSAIO.get_discount = function(b, f, d) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    var e = 0;
    switch(f) {
      case "percentage":
        e = Math.floor(Number(b) * Number(d)) / 100;
        break;
      case "price_discount":
        e = Number(b) < Number(d) ? Number(b) : Number(d);
        break;
      case "fixed_price":
        e = Number(b) <= Number(d) ? 0 : Number(b) - Number(d);
        break;
      default:
        n("Invalid discount type. Valid values are percentage, price_discount and fixed_price.");
    }
    return Number(e).toFixed(2);
  };
  WSAIO.get_price = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if (a.selected_variant.price) {
      var d = Number(a.mF(a.selected_variant.price)), e = a.get_discount(d, f.type, f.value);
      d = Number(d) - Number(e);
      try {
        d = Number(d).toFixed(2);
      } catch (c) {
        r(c);
      }
      return a.formatMoney(d, a.shopInfo.money_format);
    }
    r("Selected variant price was not defined. Reference: WSAIO.selected_variant.price");
  };
  WSAIO.get_price_in_percent = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if (a.selected_variant.price) {
      var d = Number(a.mF(a.selected_variant.price)), e = a.get_discount(d, f.type, f.value);
      return Math.round(100 - (Number(d) - Number(e)) / Number(d) * 100).toString() + "%";
    }
    r("Selected variant price was not defined. Reference: WSAIO.selected_variant.price");
  };
  WSAIO.saved_amount = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    return null === b || null === f || isNaN(b) || isNaN(f) ? {percentage:"0%", price:"0"} : {percentage:Math.round(100 - f / b * 100) + "%", price:Number(b - f).toFixed(2)};
  };
  WSAIO.volumeDiscountPriority = function() {
    if (a.productRd && a.productRd.length && a.productVd && a.productVd.length) {
      try {
        -1 < a.productRd.findIndex(function(b) {
          return "has_tag" === b.customer_group;
        }) && -1 === a.productVd.findIndex(function(b) {
          return "has_tag" == b.customer_group;
        }) && (a.productVd = []);
      } catch (b) {
        r(b);
      }
      try {
        0 < a.productRd.length && -1 === a.productRd.findIndex(function(b) {
          return "all" === b.customer_group;
        }) && -1 < a.productVd.findIndex(function(b) {
          return "all" == b.customer_group;
        }) && (a.productVd = []);
      } catch (b) {
        r(b);
      }
    }
  };
  WSAIO.detailed_grid_table = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if ("undefined" !== typeof b.volume_discount && 0 < b.volume_discount.length) {
      for (var d = "", e = 0; e < b.volume_discount.length; e++) {
        var c = b.volume_discount[e];
        0 < Number(c.qty) && (d += '<tr class="wholesale-grid-table custom-table"><td>' + c.qty + "</td><td>" + a.get_price(b, c) + a.Lang.each_item + "</td></tr>");
      }
      e = '<table id="wsaio-volume-discount--table" class="wholesale-table"><thead><tr><th>' + a.Lang.buy + " " + a.Lang.quantity + "</th><th>" + a.Lang.price + "</th></tr></thead><tbody>" + d + "</tbody></table>";
      
     
//       console.log(e)
      "" != d ? a.displayTable(e, a.product_qb_table_selector, !0) : l(".wholesale-table").remove();
      l('.remodal-is-opened').find('.wholesale-table:not(:first)').remove();
    } else {
      l(".wholesale-table").remove(), r("Volume discount was not configured.");
    }
  };
  WSAIO.basic_grid_table = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if ("undefined" !== typeof b.volume_discount && 0 < b.volume_discount.length) {
      var d = "";
      b.volume_discount.forEach(function(c, g) {
        0 < Number(c.qty) && (d += '<tr class="wholesale-grid-table custom-table"><td>' + c.qty + "</td><td>" + a.get_price(b, c) + a.Lang.each_item + "</td></tr>");
      });
      var e = '<table id="wsaio-volume-discount--table" class="wholesale-table"><thead><tr><th>' + a.Lang.quantity + "</th><th>" + a.Lang.price + "</th></tr></thead><tbody>" + d + "</tbody></table>";
      "" != d ? a.displayTable(e, a.product_qb_table_selector, !0) : l(".wholesale-table").remove();
      l('.wholesale-table:not(:first)').remove();
    } else {
      l(".wholesale-table").remove(), r("Volume discount was not configured.");
    }
  };
  WSAIO.grid_range_table = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if ("undefined" !== typeof b.volume_discount && 0 < b.volume_discount.length) {
      var d = "";
      b.volume_discount.forEach(function(c, g) {
        if (0 < Number(c.qty)) {
          var h = a.Lang.range_so_on;
          b.volume_discount[g + 1] && (h = Number(b.volume_discount[g + 1].qty) - 1);
          d += '<tr class="wholesale-grid-table custom-table"><td>' + c.qty + "</td><td>" + h + "</td><td>" + a.get_price(b, c) + a.Lang.each_item + "</td></tr>";
        }
      });
      var e = '<table id="wsaio-volume-discount--table" class="wholesale-table"><thead><tr><th>' + a.Lang.minimum_quantity + "</th><th>" + a.Lang.maximum_quantity + "</th><th>" + a.Lang.price + "</th></tr></thead><tbody>" + d + "</tbody></table>";
      "" != d ? a.displayTable(e, a.product_qb_table_selector, !0) : l(".wholesale-table").remove();
          l('.remodal-is-opened').find('.wholesale-table:not(:first)').remove();
    } else {
      l(".wholesale-table").remove(), r("Volume discount was not configured.");
    }
  };
  WSAIO.detailed_grid_percent_table = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if ("undefined" !== typeof b.volume_discount && 0 < b.volume_discount.length) {
      var d = "";
      b.volume_discount.forEach(function(c, g) {
        0 < Number(c.qty) && (d += '<tr class="wholesale-grid-table custom-table"><td>' + c.qty + "</td><td>" + a.get_price(b, c) + a.Lang.each_item + "</td><td>" + a.get_price_in_percent(b, c) + " " + a.Lang.off + "</td></tr>");
      });
      var e = '<table id="wsaio-volume-discount--table" class="wholesale-table"><thead><tr><th>' + a.Lang.quantity + "</th><th>" + a.Lang.price + "</th><th>" + a.Lang.discount + "</th></tr></thead><tbody>" + d + "</tbody></table>";
      "" != d ? a.displayTable(e, a.product_qb_table_selector, !0) : l(".wholesale-table").remove();
      l('.wholesale-table:not(:first)').remove();
    } else {
      l(".wholesale-table").remove(), r("Volume discount was not configured.");
    }
  };
  WSAIO.percent_grid_table = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if ("undefined" !== typeof b.volume_discount && 0 < b.volume_discount.length) {
      var d = "";
      b.volume_discount.forEach(function(c, g) {
        0 < Number(c.qty) && (d += '<tr class="wholesale-grid-table custom-table"><td>' + a.Lang.buy + " " + c.qty + "</td><td>" + a.get_price_in_percent(b, c) + " " + a.Lang.off + "</td></tr>");
      });
      var e = '<table id="wsaio-volume-discount--table" class="wholesale-table"><thead><tr><th>' + a.Lang.quantity + "</th><th>" + a.Lang.discount + "</th></tr></thead><tbody>" + d + "</tbody></table>";
      "" != d ? a.displayTable(e, a.product_qb_table_selector, !0) : l(".wholesale-table").remove();
      l('.wholesale-table:not(:first)').remove();
    } else {
      l(".wholesale-table").remove(), r("Volume discount was not configured.");
    }
  };
  WSAIO.grid_range_alternate_table = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if ("undefined" !== typeof b.volume_discount && 0 < b.volume_discount.length) {
      var d = "";
      b.volume_discount.forEach(function(c, g) {
        if (0 < Number(c.qty)) {
          var h = a.Lang.range_so_on;
          b.volume_discount[g + 1] && (h = Number(b.volume_discount[g + 1].qty) - 1);
          d += '<tr class="wholesale-grid-table custom-table"><td>' + c.qty + a.Lang.range_seperator + h + "</td><td>" + a.get_price(b, c) + a.Lang.each_item + "</td></tr>";
        }
      });
      var e = '<table id="wsaio-volume-discount--table" class="wholesale-table"><thead><tr><th>' + a.Lang.quantity + "</th><th>" + a.Lang.price + "</th></tr></thead><tbody>" + d + "</tbody></table>";
      "" != d ? a.displayTable(e, a.product_qb_table_selector, !0) : l(".wholesale-table").remove();
            l('.remodal-is-opened').find('.wholesale-table:not(:first)').remove();
    } else {
      l(".wholesale-table").remove(), r("Volume discount was not configured.");
    }
  };
  WSAIO.fetchCart = function(b) {
    l.ajax({type:"GET", url:"/cart.js", cache:!1, dataType:"json", success:function(f) {
      var d = [];
      f && f.items && 0 < f.items.length && (f.items.forEach(function(e, c) {
        try {
          delete e.product_description, delete e.featured_image, delete e.url, delete e.options_with_values, delete e.variant_options, delete e.product_description;
        } catch (g) {
          n(g);
        }
        d.push(e);
      }), f.items = d);
      try {
        "undefined" === typeof window.waioMOC && (window.waioMOC = {});
        "undefined" === typeof waioMOC.cart && (waioMOC.cart = {});
        try {
          waioMOC.cart.item_count = f.item_count;
        } catch (e) {
        }
      } catch (e) {
      }
      "function" === typeof b && b(null, f);
    }, error:function(f) {
      "function" === typeof b && b(f, null);
    }});
  };
  WSAIO.checkout = function() {
    if (WSAIO["debugger"]) {
      debugger;
    }
    a.fetchCart(function(b, f) {
      if (b) {
        return r(b);
      }
      var d = {custom_line_items:[], cart:f, tags:"wsaio-app", note:l("[name=note]").val(), shopInfo:a.shopInfo, customer:a.customer, user_mode:a.user_mode, currency:a.shopInfo.currency, shopifyCurrencies:a.getCurrencies(), discount_code_application:WSAIO.DiscountCode.application, products_with_collections:a.products_with_collections || [], };
      !0 === a.variant_sku_are_same && (d.variant_sku_are_same = a.variant_sku_are_same);
      a.coupon_expires_after_hours && (d.coupon_expires_after_hours = a.coupon_expires_after_hours);
      if (a.auto_delete_api) {
        if (null != localStorage.getItem("draft_order_info")) {
          try {
            d.prev_draft_order_info = JSON.parse(localStorage.getItem("draft_order_info"));
          } catch (e) {
            n(e);
          }
        }
        if (null != localStorage.getItem("price_rule_info")) {
          try {
            d.prev_price_rule_info = JSON.parse(localStorage.getItem("price_rule_info"));
          } catch (e) {
            n(e);
          }
        }
      }
      a.customer && a.customer.addresses && a.customer.addresses[0] && (d.shipping_address = a.customer.addresses[0]);
      a.checkoutRequest(d, function(e, c) {
        if (e) {
          return n(e), a.redirectToURL("/checkout?wholesale=error");
        }
        "function" === typeof a.callback && a.callback(c);
        return c && c.checkout_url ? a.redirectToURL(c.checkout_url) : a.redirectToURL("/checkout?wholesale=error");
      });
    });
  };
  WSAIO.getDiscountCode = function(b) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    WSAIO.fetchCart(function(f, d) {
      if (f) {
        return n(f);
      }
      var e = {note_attributes:[], cart:d, tags:"wsaio-app", note:l("[name=note]").val(), shopInfo:WSAIO.shopInfo, customer:WSAIO.customer, user_mode:WSAIO.user_mode, currency:WSAIO.shopInfo.currency, custom_line_items:[], shopifyCurrencies:WSAIO.getCurrencies(), discount_code_application:WSAIO.DiscountCode.application, products_with_collections:WSAIO.products_with_collections || []};
      a.variant_sku_are_same && (e.variant_sku_are_same = a.variant_sku_are_same);
      a.coupon_expires_after_hours && (e.coupon_expires_after_hours = a.coupon_expires_after_hours);
      if (a.auto_delete_api) {
        if (null != localStorage.getItem("draft_order_info")) {
          try {
            e.prev_draft_order_info = JSON.parse(localStorage.getItem("draft_order_info"));
          } catch (c) {
            n(c);
          }
        }
        if (null != localStorage.getItem("price_rule_info")) {
          try {
            e.prev_price_rule_info = JSON.parse(localStorage.getItem("price_rule_info"));
          } catch (c) {
            n(c);
          }
        }
      }
      WSAIO.checkoutRequest(e, b);
    });
  };
  WSAIO.preCheckout = function() {
    if (WSAIO["debugger"]) {
      debugger;
    }
    a.fetchCart(function(b, f) {
      if (b) {
        return r(b);
      }
      var d = {cart:f, shopInfo:a.shopInfo, customer:a.customer, user_mode:a.user_mode, shopifyCurrencies:a.getCurrencies(), discount_code_application:WSAIO.DiscountCode.application, products_with_collections:a.products_with_collections || []};
      a.variant_sku_are_same && (d.variant_sku_are_same = a.variant_sku_are_same);
      if (a.auto_delete_api) {
        if (null != localStorage.getItem("draft_order_info")) {
          try {
            d.prev_draft_order_info = JSON.parse(localStorage.getItem("draft_order_info"));
          } catch (e) {
            n(e);
          }
        }
        if (null != localStorage.getItem("price_rule_info")) {
          try {
            d.prev_price_rule_info = JSON.parse(localStorage.getItem("price_rule_info"));
          } catch (e) {
            n(e);
          }
        }
      }
      a.preCheckoutRequest(d, function(e, c) {
          if(WSAIO.checkout != undefined){
            var _atcBtn = '<input type="button" name="waio_addToCart" class="action_button add_to_cart" value="Check out">' ; 
            $('[name="checkout"]').replaceWith(_atcBtn);
          }
          $('[name="waio_addToCart"]').on('click',function(e){
            if(WSAIO.checkout != undefined){
              e.preventDefault();
              WSAIO.checkout();
              return false;
            }
          })
        e ? n(e) : ("function" === typeof a.callback && a.callback(c), a.preCheckoutResponse(c));
      });
    });
  };
  WSAIO.preCheckoutResponse = function(b) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    b && b.shipping && (a.applied_shipping = b.shipping, a.applied_shipping.apply_shipping_charges && a.alterHTML(a.shipping_message_html.replace("%message%", a.applied_shipping.final_ship_rule.message), a.shipping_message_selector));
    if (b && 0 < Number(b.wholesale_total_discount) && (a.setCartSubtotal(b.original_total_price, b.checkout_price_from_total_price), b.line_items && a.setCartItemsPrice(b.line_items), 0 < Number(b.wholesale_total_discount))) {
      var f = a.cart_bulk_saving_html.replace("%saved_amount%", a.formatMoney(b.wholesale_total_discount));
      a.alterHTML(f, a.cart_bulk_saving_selector);
    }
    b.original_total_price && (a.cart_total = b.original_total_price, a.cart_discounted_total = b.checkout_price_from_total_price);
  };
  WSAIO.redirectToURL = function(b) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    b ? window.location.href = b : r("Redirect URL was not found!");
  };
  WSAIO.checkoutRequest = function(b, f) {
    l.ajax({type:"POST", url:a.App.checkoutURL + a.checkout_version, cache:!1, data:b, success:function(d) {
      n(d);
      l(a.checkout_selector).prop("disabled", !1);
      try {
        if (d && d.price_rule_info) {
          try {
            localStorage.setItem("price_rule_info", JSON.stringify(d.price_rule_info));
          } catch (e) {
            n(e);
          }
        }
        if (d && d.draft_order_info) {
          try {
            localStorage.setItem("draft_order_info", JSON.stringify(d.draft_order_info));
          } catch (e) {
            n(e);
          }
        }
      } catch (e) {
        n(e);
      }
      "function" === typeof f && f(null, d);
    }, error:function(d) {
      "function" === typeof f && f(d, null);
    }});
  };
  WSAIO.preCheckoutRequest = function(b, f) {
    l.ajax({type:"POST", url:a.App.checkoutURL + a.checkout_version + "/pre", cache:!1, data:b, success:function(d) {
      n(d);
      "function" === typeof f && f(null, d);
    }, error:function(d) {
      "function" === typeof f && f(d, null);
    }});
  };
  WSAIO.checkoutEventListner = function(b) {
    l(a.checkout_selector).removeAttr("disabled");
    l(document).on("click", a.checkout_selector, function(f) {
      f.preventDefault();
      f.stopImmediatePropagation();
      f.stopPropagation();
      l(this).attr("disabled");
      l(this).find('[name="discount"], [name="clear_discount"]').remove();
      l(this).parents("form").find('[name="discount"], [name="clear_discount"]').remove();
      n("Wholesale All In One checkout is working.");
      a.checkout();
    });
  };
  WSAIO.setCartSubtotal = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if ("undefined" !== typeof b && "undefined" !== typeof f && !(0 > Number(b) || 0 > Number(f))) {
      var d = a.formatMoney(f, a.shopInfo.money_format), e = "";
      Number(b) > Number(f) && (e = a.formatMoney(b, a.shopInfo.money_format));
      try {
        e = e.replace("$", "$@"), d = d.replace("$", "$@");
      } catch (c) {
        n(c);
      }
      d = a.cart_subtotal_price_html.replace("%regular_price%", d).replace("%compare_at_price%", e);
      try {
        d = d.replace(/@/g, "");
      } catch (c) {
        n(c);
      }
      a.alterHTML(d, a.subtotal_selector);
    }
  };
  WSAIO.setCartItemsPrice = function(b) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    b && 0 < b.length && b.forEach(function(f, d) {
      if ("undefined" !== typeof f.wholesale) {
        var e = f.wholesale;
        try {
          e.item_subtotal_price = e.item_subtotal_price.replace("$", "$@"), e.item_subtotal_compare_at_price = e.item_subtotal_compare_at_price.replace("$", "$@");
        } catch (k) {
          n(k);
        }
        var c = a.cart_item_total_price_html.replace("%regular_price%", a.formatMoney(e.item_subtotal_price)).replace("%compare_at_price%", a.formatMoney(e.item_subtotal_compare_at_price)), g = a.cart_item_total_selector.replace("%key%", f.key.replace(":", "_"));
        if (Number(e.item_subtotal_price) < Number(e.item_subtotal_compare_at_price)) {
          try {
            c = c.replace(/@/g, "");
          } catch (k) {
            n(k);
          }
          a.alterHTML(c, g);
        }
        try {
          e.regular_price = e.regular_price.replace("$", "$@"), e.original_price = e.original_price.replace("$", "$@");
        } catch (k) {
          n(k);
        }
        c = a.cart_item_price_html.replace("%regular_price%", a.formatMoney(e.regular_price)).replace("%compare_at_price%", a.formatMoney(e.original_price));
        g = a.cart_item_price_selector.replace("%key%", f.key.replace(":", "_"));
        if (Number(e.regular_price) < Number(e.original_price)) {
          try {
            c = c.replace(/@/g, "");
          } catch (k) {
            n(k);
          }
          a.alterHTML(c, g);
        }
        c = a.cart_item_saved_price_html.toString();
        var h = g = "";
        e && e.saved_amount && e.saved_amount.percentage && (h = e.saved_amount.percentage);
        e && e.saved_amount && e.saved_amount.price && (g = e.saved_amount.price);
        c = c.replace(RegExp("%saved_amount:price%", "gi"), a.formatMoney(g)).replace(RegExp("%saved_amount:percentage%", "gi"), h);
        a.alterHTML(c, a.cart_item_saved_price_selector.replace("%key%", f.key.replace(":", "_")));
      }
    });
  };
  WSAIO.productDiscount = function(b, f) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if ("undefined" === typeof b) {
      return r("This action required some parameters.");
    }
    "undefined" === typeof b.product_id && (b.product_id = "default");
    "undefined" === typeof b.product_handle && (b.product_handle = "default");
    "undefined" === typeof b.variant_id && (b.variant_id = "default");
    "undefined" === typeof b.variant_sku && (b.variant_sku = "default");
    "undefined" === typeof b.variant_price && (b.variant_price = "default");
    "undefined" === typeof b.variant_compare_at_price && (b.variant_compare_at_price = "default");
    "undefined" === typeof b.collection_id && (b.collection_id = "default");
    "undefined" === typeof b.qb_table_selector && (b.qb_table_selector = "default");
    "undefined" === typeof b.remove_duplicate_table && (b.remove_duplicate_table = "default");
    "undefined" === typeof b.template && (b.template = "default");
    WSAIO.regularDiscount(b, function(d) {
      "product" === b.template || "product" === a.landingTemplate || !0 === b.apply_volume_discount ? WSAIO.volumeDiscount(b, function(e) {
        "function" === typeof f && f({regular_discount:d, volume_discount:e});
      }) : a.volume_discount_on_hcsr ? WSAIO.volumeDiscount(b, function(e) {
        "function" === typeof f && f({regular_discount:d, volume_discount:e});
      }) : "function" === typeof f && f({regular_discount:d, volume_discount:"Not executed"});
    });
  };
  WSAIO.variantChange = function(b, f, d) {
    if (WSAIO["debugger"]) {
      debugger;
    }
    d.available && (a.variantOriginalPrice(), setTimeout(function(){ a.productDiscount({template:"product", product_id:d.id, product_handle:d.handle, variant_id:b.id, variant_sku:b.sku, variant_price:b.price, variant_compare_at_price:b.compare_at_price})},400));
  };
  WSAIO.selectedCurrency = function(b) {
    return l(b || a.currency_selector).val();
  };
  WSAIO.getCurrencies = function() {
    if (WSAIO["debugger"]) {
      debugger;
    }
    "undefined" !== typeof window.Currency ? WSAIO.Currency.rates = window.Currency.rates : r("Multi currencies was not configured.");
    a.Currency.selectedCurrency = a.selectedCurrency();
    a.Currency.storeCurrency = a.shopInfo.currency;
    return a.Currency;
  };
  WSAIO.Currency.convert = function(b, f, d, e) {
    "undefiend" === typeof b && (b = a.Currency.rates);
    try {
      return f * b[d] / b[e];
    } catch (c) {
      return c;
    }
  };
  WSAIO.getProduct = function(b, f) {
    l.getJSON("/products/" + b + ".js", function(d) {
      "function" === typeof f && f(d);
    });
    return "Use callback function to get product";
  };
  WSAIO.buy_it_now = function() {
    l(document).on("click", a.buy_now_button_selector, function(b) {
      function f() {
        if ("undefined" !== typeof a.buy_now_product && null !== a.buy_now_product) {
          var g = a.buy_now_product;
          if (g) {
            var h = g.variants.findIndex(function(p) {
              return p.id == e;
            }), k = {};
            -1 < h && (k = g.variants[h]);
            if (k.available) {
              h = Number(k.price) * Number(c);
              g = {cart:{attributes:{}, cart_level_discount_applications:[], currency:a.Currency.selectedCurrency || a.shopInfo.currency, item_count:c, items:[{discounted_price:k.price, discounts:[], featured_image:g.featured_image, final_line_price:h, final_price:k.price, gift_card:!1, grams:k.weight, handle:g.handle, id:k.id, image:g.featured_image, key:"11309472350255:a5c7b76a76a9b8da2aa5dceab2c6b7ab", line_level_discount_allocations:[], line_price:h, options_with_values:[], original_line_price:h, 
              original_price:k.price, price:k.price, product_description:"", product_has_only_default_variant:!1, product_id:g.id, product_title:g.title, product_type:g.type, properties:null, quantity:c, requires_shipping:k.requires_shipping, sku:k.sku, taxable:k.taxable, title:g.title + " - " + k.title, total_discount:0, url:"/products/" + d + "?variant=" + k.id, variant_id:k.id, variant_options:k.options, variant_title:k.title, vendor:g.vendor}], items_subtotal_price:h, note:null, original_total_price:h, 
              requires_shipping:k.requires_shipping, token:"3cbccfbccb5ed48c66e4ced34048082d", total_discount:0, total_price:h, total_weight:Number(k.weight) * Number(c)}, note:"", tags:"wsaio-app,checkout-via-buy-now-button", note_attributes:[], billing_address:{}, shipping_address:{}, shopInfo:a.shopInfo, customer:a.customer, user_mode:a.user_mode, currency:a.shopInfo.currency, custom_line_items:[], shopifyCurrencies:a.getCurrencies(), discount_code_application:WSAIO.DiscountCode.application, products_with_collections:a.products_with_collections, 
              variant_sku_are_same:a.variant_sku_are_same};
              a.variant_sku_are_same && (g.variant_sku_are_same = a.variant_sku_are_same);
              a.coupon_expires_after_hours && (g.coupon_expires_after_hours = a.coupon_expires_after_hours);
              if (a.auto_delete_api) {
                if (null != localStorage.getItem("draft_order_info")) {
                  try {
                    g.prev_draft_order_info = JSON.parse(localStorage.getItem("draft_order_info"));
                  } catch (p) {
                    n(p);
                  }
                }
                if (null != localStorage.getItem("price_rule_info")) {
                  try {
                    g.prev_price_rule_info = JSON.parse(localStorage.getItem("price_rule_info"));
                  } catch (p) {
                    n(p);
                  }
                }
              }
              if (WSAIO.orderControl(h, a.buy_now_button_selector)) {
                return !1;
              }
              a.checkoutRequest(g, function(p, q) {
                return p ? (n(p), a.redirectToURL("/cart/" + e + ":" + c)) : q && q.checkout_url && -1 < q.checkout_url.indexOf("invoices") ? a.redirectToURL(q.checkout_url) : q && a.general_settings && "coupon_code" == a.general_settings.discount_method && q.discount_code ? a.redirectToURL("/cart/" + e + ":" + c + "?discount=" + q.discount_code) : a.redirectToURL("/cart/" + e + ":" + c);
              });
            } else {
              r("Variant is not available or missing variant"), a.redirectToURL("/cart/" + e + ":" + c);
            }
          } else {
            r("Product object is missing"), a.redirectToURL("/cart/" + e + ":" + c);
          }
        } else {
          a.redirectToURL("/cart/" + e + ":" + c);
        }
      }
      b.preventDefault();
      b.stopImmediatePropagation();
      l(this).prop("disabled", !0);
      b = l(this).parents("form");
      var d = b.find('[name="id"]').attr("data-handle"), e = b.find('[name="id"]').val(), c = b.find('[name="quantity"]').val();
      void 0 === c && (c = 1);
      a.buy_now_product ? f() : a.getProduct(d, function(g) {
        a.buy_now_product = g;
        f();
      });
    });
  };
  WSAIO.orderControl = function(b, f, d, e) {
    "undefined" === typeof window.waioMOC && (window.waioMOC = {});
    "undefined" === typeof waioMOC.cart && (waioMOC.cart = {});
    if ("undefined" === typeof b || null == b || isNaN(b)) {
      console.error("min price was not provided for buy now product");
    } else {
      try {
        waioMOC.cart.original_total_price = b;
      } catch (c) {
        console.warn(c);
      }
    }
    if ("undefined" !== typeof b && null != b && !isNaN(b)) {
      try {
        waioMOC.cart.original_total_price = b;
      } catch (c) {
        console.warn(c);
      }
    }
    try {
      WSAIO.order_control(), WSAIO.disableCheckout(e, d, f);
    } catch (c) {
      console.warn(c);
    }
    return WSAIO.disable_checkout;
  };
  WSAIO.DiscountCode.subscribe = function(b) {
    var f = this, d = "[name=" + a.discount_code_field_name + "]";
    l("[name=" + a.discount_code_field_btn + "]").on(b || "click", function(e) {
      e.preventDefault();
      e.stopImmediatePropagation();
      e.stopPropagation();
      f.code = l(this).closest("div").find(d).val();
      "" === f.code.trim() ? (l(d).addClass("ws-error"), l(d).focus()) : (l(d).removeClass("ws-error"), f.apply());
    });
  };
  WSAIO.DiscountCode.apply = function() {
    if (WSAIO["debugger"]) {
      debugger;
    }
    $discount = this;
    a.fetchCart(function(b, f) {
      if (b) {
        return r(b);
      }
      l.ajax({type:"POST", url:a.App.checkoutURL + "/discount-code", data:{cart:f, shopInfo:a.shopInfo, customer:a.customer, coupon_code:$discount.code, products_with_collections:a.products_with_collections}, dataType:"json", success:function(d) {
        n(d);
        try {
          delete d.log;
        } catch (c) {
          n(c);
        }
        "function" === typeof a.callback && a.callback(d);
        if (d && 1 === d.status) {
          $discount.application = "undefined" !== typeof d.wholesale_key ? d : void 0;
          var e = "<span>" + a.discount_code_success_message + "</span>";
          e = "percentage" === d.type && -1 < a.discount_code_success_message.indexOf("%percent%") ? e.replace("%percent%", d.value + "%") : e.replace("%percent%", "").replace("%price_discount%", "");
          a.alterHTML(e, a.discount_code_alerts_selector);
        } else {
          if (d.once_per_customer && null === WSAIO.customer.id) {
            return a.alterHTML("<span>" + a.discount_code_customer_login_message + "</span>", a.discount_code_alerts_selector);
          }
          a.alterHTML("<span>" + a.discount_code_error_message + "</span>", a.discount_code_alerts_selector);
        }
      }});
    });
  };
  WSAIO.collection = function() {
    if ("object" === typeof a.products_in_collection && 0 < a.products_in_collection.length) {
      for (var b = 0; b < a.products_in_collection.length; b++) {
        var f = a.products_in_collection[b];
        f.available && (a.volume_discount_on_hcsr ? a.productDiscount({template:"collection", product_id:f.id, product_handle:f.handle, variant_id:f.first_available_variant.id, variant_sku:f.first_available_variant.sku, variant_price:f.first_available_variant.price, variant_compare_at_price:f.first_available_variant.compare_at_price}) : a.regularDiscount({template:"collection", product_id:f.id, product_handle:f.handle, variant_id:f.first_available_variant.id, variant_sku:f.first_available_variant.sku, 
        variant_price:f.first_available_variant.price, variant_compare_at_price:f.first_available_variant.compare_at_price}));
      }
    }
  };
  WSAIO.relatedProducts = function() {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if ("object" === typeof a.product_recommendations) {
      for (var b = 0; b < a.product_recommendations.length; b++) {
        var f = a.product_recommendations[b];
        a.productDiscount({template:"collection", product_id:f.id, product_handle:f.handle, variant_id:f.first_available_variant.id, variant_sku:f.first_available_variant.sku, variant_price:f.first_available_variant.price, variant_compare_at_price:f.first_available_variant.compare_at_price});
      }
    }
  };
  WSAIO.signUpForm = function() {
    if (WSAIO["debugger"]) {
      debugger;
    }
    if ("undefined" !== typeof a.signup_form) {
      try {
        0 < l(a.signup_form_selector).length ? l(a.signup_form_selector).html(a.signup_form.form_html) : n("Sign Up form selector not found");
      } catch (b) {
        r(b);
      }
    } else {
      n("We could not found Signup Form. Save signup form in the wholesale applicatipn dashboard and then refresh this page");
    }
  };
  WSAIO.removeAllEvents = function(b) {
    try {
      for (var f = 0; f < document.querySelectorAll(b).length; f++) {
        var d = document.querySelectorAll(b)[f];
        d.parentNode.replaceChild(d.cloneNode(!0), d);
      }
    } catch (e) {
      n(e);
    }
  };
  WSAIO.registerEvent = function(b, f, d) {
    try {
      for (var e = 0; e < document.querySelectorAll(b).length; e++) {
        document.querySelectorAll(b)[e].addEventListener(f, d);
      }
    } catch (c) {
      n(c);
    }
  };
  WSAIO.buyNowEventListener = function() {
    a.buyNowRecursion(30);
  };
  WSAIO.addBuyNowBtnHTML = function() {
    l(a.shopify_payment_button_wrapper).html(a.buy_now_button_html);
    a.buy_it_now();
    WSAIO.buy_now_btn_interval *= 1.5;
    setTimeout(function() {
      WSAIO.buyNowEventListener();
    }, WSAIO.buy_now_btn_interval);
  };
  WSAIO.buyNowRecursion = function(b) {
    0 >= b || (0 < l(a.buy_now_button_selector).length ? a.addBuyNowBtnHTML() : setTimeout(function() {
      a.buyNowRecursion(--b);
    }, 500));
  };
  WSAIO.DiscountCode.add = function() {
    !0 === WSAIO.general_settings.enable_additional_coupon_code && (a.DiscountCode.addForm(), a.DiscountCode.subscribe("click"));
  };
  WSAIO.cartDrawer = function() {
    a.checkoutEventListner();
    a.preCheckout();
  };
  l(document).on("change", a.cart_qty_change_selector, function() {
    setTimeout(function() {
      a.preCheckout();
    }, 500);
  });
  "undefined" === typeof WSAIO.Currency.rates && (WSAIO.Currency.rates = {});
  "undefined" === typeof WSAIO.Currency.selectedCurrency && (WSAIO.Currency.selectedCurrency = a.selectedCurrency());
  WSAIO.Currency.storeCurrency = a.shopInfo.currency;
  "undefined" !== typeof window.Currency && (WSAIO.Currency.rates = window.Currency.rates);
  WSAIO.estTime = function() {
    var b = new Date;
    b.setTime(b.getTime() + 6E4 * b.getTimezoneOffset());
    return (new Date(b.getTime() + -18E6)).getTime();
  };
  WSAIO.getSchedule = function(b) {
    function f() {
      function p(t) {
        return (10 > t ? "0" : "") + t;
      }
      var q = (new Date).getTimezoneOffset(), m = 0 > q ? "+" : "-";
      q = Math.abs(q);
      return m + p(q / 60 | 0) + p(q % 60);
    }
    function d(p, q) {
      var m = new Date(p);
      if ("object" === typeof m) {
        try {
          m = m.toString(), "string" === typeof m && (m = m.replace(f(), "+0000"));
        } catch (t) {
          n(t);
        }
      }
      try {
        m = (new Date(m)).toISOString();
      } catch (t) {
        n(t);
      }
      try {
        m = m.split("T")[0] + " " + q;
      } catch (t) {
        n(t);
      }
      return m;
    }
    function e(p, q) {
      p = new Date(p);
      q = new Date(q);
      if ("Invalid Date" === p || "Invalid Date" === q || !p || !q || "object" !== typeof p || "object" !== typeof q) {
        return 0;
      }
      if (p > q) {
        var m = e(q, p);
        m.years = -m.years;
        m.months = -m.months;
        m.days = -m.days;
        m.hours = -m.hours;
        m.minutes = -m.minutes;
        m.seconds = -m.seconds;
        return m;
      }
      m = {years:q.getYear() - p.getYear(), months:q.getMonth() - p.getMonth(), days:q.getDate() - p.getDate(), hours:q.getHours() - p.getHours(), minutes:q.getMinutes() - p.getMinutes(), seconds:q.getSeconds() - p.getSeconds()};
      0 > m.seconds && (m.minutes--, m.seconds += 60);
      0 > m.minutes && (m.hours--, m.minutes += 60);
      0 > m.hours && (m.days--, m.hours += 24);
      if (0 > m.days) {
        m.months--;
        var t = new Date(p.getTime());
        t.setDate(32);
        m.days = 32 - p.getDate() - t.getDate() + q.getDate();
      }
      0 > m.months && (m.years--, m.months += 12);
      return m;
    }
    var c = {years:1, months:1, days:1, hours:1, minutes:1, seconds:1}, g = {years:-1, months:-1, days:-1, hours:-1, minutes:-1, seconds:-1}, h = function() {
      var p = new Date;
      p.setTime(p.getTime() + 6E4 * p.getTimezoneOffset());
      return (new Date(p.getTime() + -18E6)).getTime();
    }();
    if (b) {
      if (b.start_date && b.start_time_est) {
        var k = d(b.start_date, b.start_time_est);
        g = e(h, k);
        n("start_schedule_difference", g);
      }
      b.end_date && b.end_time_est && (k = d(b.end_date, b.end_time_est), c = e(h, k), n("end_schedule_difference", c));
    }
    return {ends_in:c, started:g, est_time_now:h};
  };
  WSAIO.saleClock = function(b, f, d) {
    if (b && b.schedule_active && b.schedule) {
      var e = a.getSchedule(b.schedule), c = !1;
      e.ends_in && (0 < Number(e.ends_in.years) || 0 < Number(e.ends_in.months) || 0 < Number(e.ends_in.days) || 0 < Number(e.ends_in.hours) || 0 < Number(e.ends_in.minutes) || 0 < Number(e.ends_in.seconds)) && (c = !0);
      if (c && e.ends_in) {
        try {
          c = a.general_settings.sale_clock.show_sale_clock || !1;
        } catch (g) {
        }
        c ? a.runClock(b.schedule, f.id, d) : a.removeClock(f.id);
      } else {
        a.removeClock(f.id), n("Sale clock was disabled");
      }
    } else {
      n("No schedule found");
    }
  };
  WSAIO.removeClock = function(b) {
    l(a.rd_sale_clock_selector.replace("%id%", b)).remove();
  };
  WSAIO.runClock = function(b, f, d) {
    function e() {
      var g = a.getSchedule(b);
      if (g.ends_in) {
        if (0 < Number(g.ends_in.years) || 0 < Number(g.ends_in.months) || 0 < Number(g.ends_in.days) || 0 < Number(g.ends_in.hours) || 0 < Number(g.ends_in.minutes) || 0 < Number(g.ends_in.seconds)) {
          g = a.getClockTextByType(g.ends_in, b, c);
          var h = "";
          try {
            h = a.general_settings.sale_clock.sale_clock_text1 + " " + g + " " + a.general_settings.sale_clock.sale_clock_text2;
          } catch (k) {
            n(k);
          }
          "" == h && (h = g);
          l(a.rd_sale_clock_selector.replace("%id%", f)).html(function(k) {
            var p = a.general_settings.sale_clock.style, q = "";
            p.font_size && (q += "font-size:" + p.font_size + "px;");
            p.border_radius && (q += "border-radius:" + p.border_radius + "px;");
            p.hex_bg_color && (q += "background-color:" + p.hex_bg_color + ";");
            p.hex_fg_color && (q += "color:" + p.hex_fg_color + ";");
            p.padding && (q += "padding:" + p.padding + ";");
            p.text_align && (q += "text-align:" + p.text_align + ";");
            return '<div style="' + q + '">' + k + "</div>";
          }(h));
        } else {
          a.removeClock(f);
        }
      } else {
        a.removeClock(f);
      }
    }
    var c = 1;
    try {
      c = a.general_settings.sale_clock.sale_clock_type;
    } catch (g) {
      n(g);
    }
    1 == c || 8 == c || 9 == c ? setInterval(function() {
      e();
    }, 1000) : e();
  };
  WSAIO.getClockTextByType = function(b, f, d) {
    function e(p, q) {
      var m = new Date(p), t = m.getFullYear(), u = m.getMonth() + 1;
      m = m.getDate();
      return t + "-" + u + "-" + m + " " + q;
    }
    var c = "";
    try {
      switch(d) {
        case "1":
          0 < b.days && (c += b.days + (1 == b.days ? "day, " : "days, "));
          0 < b.hours && (c += b.hours + (1 == b.hours ? "hour, " : "hours, "));
          if (0 < b.minutes) {
            var g = b.minutes;
            10 > g && (g = "0" + g);
            c += g + (1 == b.minutes ? "minute, " : "minutes, ");
          }
          if (0 <= b.seconds) {
            var h = b.seconds;
            10 > h && (h = "0" + h);
            c += '<span class="wsaio--seconds">' + h + "</span>" + (1 >= b.seconds ? "second" : "seconds");
          }
          break;
        case "2":
          0 < b.days ? c += b.days + (1 == b.days ? " day" : " days") : 0 == b.days ? 0 < b.hours && (c += b.hours + (1 == b.hours ? "hour" : "hours")) : c += "";
          break;
        case "3":
          var k = {timeZone:"America/New_York", weekday:"long", year:"numeric", month:"long", day:"numeric", hour:"numeric", minute:"numeric", second:"numeric"};
          c += (new Date(e(f.end_date, f.end_time_est))).toLocaleDateString("en-UK", k);
          break;
        case "4":
          k = {timeZone:"America/New_York", weekday:"long", year:"numeric", month:"long", day:"numeric"};
          c += (new Date(e(f.end_date, f.end_time_est))).toLocaleDateString("en-UK", k);
          break;
        case "5":
          k = {timeZone:"America/New_York", year:"numeric", month:"long", day:"numeric"};
          c += (new Date(e(f.end_date, f.end_time_est))).toLocaleDateString("en-UK", k);
          break;
        case "6":
          k = {timeZone:"America/New_York", year:"numeric", month:"short", day:"numeric", hour:"numeric", minute:"numeric", second:"numeric"};
          c += (new Date(e(f.end_date, f.end_time_est))).toLocaleDateString("en-UK", k);
          break;
        case "7":
          k = {timeZone:"America/New_York", year:"numeric", month:"short", day:"numeric"};
          c += (new Date(e(f.end_date, f.end_time_est))).toLocaleDateString("en-UK", k);
          break;
        case "8":
          0 < b.days && (c += b.days + "d:");
          0 < b.hours && (c += b.hours + "h:");
          0 < b.minutes && (g = b.minutes, 10 > g && (g = "0" + g), c += g + "m:");
          0 <= b.seconds && (h = b.seconds, 10 > h && (h = "0" + h), c += '<span class="wsaio-seconds">' + h + "</span>s");
          break;
        case "9":
          0 < b.days && (c += b.days + (1 == b.days ? "day " : "days ")), 0 < b.hours && (c += b.hours + (1 == b.hours ? "hour " : "hours ")), 0 < b.minutes && (g = b.minutes, 10 > g && (g = "0" + g), c += g + (1 == b.minutes ? "minute " : "minutes ")), 0 <= b.seconds && (h = b.seconds, 10 > h && (h = "0" + h), c += '<span class="wsaio-seconds">' + h + "</span>" + (1 >= b.seconds ? "second" : "seconds"));
      }
    } catch (p) {
      n(p);
    }
    return c;
  };
  isNaN(WSAIO.buy_now_btn_interval) && (WSAIO.buy_now_btn_interval = 1000);
  WSAIO.run_app = function() {
    "undefined" !== typeof window.Currency ? WSAIO.Currency.rates = window.Currency.rates : r("WSAIO Error! Multi currencies was not configured.");
    "product" === a.landingTemplate && a.productDiscount({template:"product", product_id:a.selected_product.id, product_handle:a.selected_product.handle, variant_id:a.selected_variant.id, variant_sku:a.selected_variant.sku, variant_price:a.selected_variant.price, variant_compare_at_price:a.selected_variant.compare_at_price});
    "line_items" === a.general_settings.discount_method && !0 === WSAIO.general_settings.enable_additional_coupon_code && (a.DiscountCode.addForm(), a.DiscountCode.subscribe("click"));
    "cart" === a.landingTemplate && (a.checkoutEventListner(), a.preCheckout());
    "collection" !== a.landingTemplate && "search" !== a.landingTemplate || a.collection();
    "product" !== a.landingTemplate && "index" !== a.landingTemplate || setTimeout(function() {
      a.relatedProducts();
    }, 3000);
    a.signUpForm();
    setTimeout(function() {
      a.buyNowEventListener();
    }, WSAIO.buy_now_btn_interval || 2000);
    setTimeout(function() {
      try {
        "function" === typeof window.wsaio_execute_custom_code && window.wsaio_execute_custom_code(l);
      } catch (b) {
        n(b);
      }
    }, 2200);
  };
  a.app_auto_start && a.run_app();
};
function ws_load_app(l) {
  "database" == WSAIO.db_config ? $.ajax({type:"GET", url:WSAIO.App.url + "/api/get-rules?shop=" + WSAIO.shopInfo.shop, cache:!1, success:function(n) {
    n && (n.volume_discounts && (WSAIO.volume_discounts = n.volume_discounts), n.regular_discounts && (WSAIO.regular_discounts = n.regular_discounts), WSAIO.init(l));
  }, error:function(n) {
    console.error("WSAIO could not be initialized.", n);
  }}) : WSAIO.init(l);
}
WSAIO.removeQueryString = function(l, n) {
  var r = document.location.href, a = location.search;
  "" != l ? (n = encodeURIComponent(n), l = l + "=" + n, "-1" != a.indexOf("?" + l + "&") ? r = r.replace("?" + l + "&", "?") : "-1" != a.indexOf("&" + l + "&") ? r = r.replace("&" + l + "&", "&") : "-1" != a.indexOf("?" + l) ? r = r.replace("?" + l, "") : "-1" != a.indexOf("&" + l) && (r = r.replace("&" + l, ""))) : (a = location.search, r = r.replace(a, ""));
  history.pushState({state:1, rand:Math.random()}, "", r);
};
WSAIO.getParameterByName = function(l) {
  for (var n = [], r = window.location.search.substring(1).split("&"), a = 0; a < r.length; a++) {
    var b = r[a].split("=");
    b[0] == l && n.push(decodeURIComponent(b[1]));
  }
  return n;
};
window.wsaioClosePreview = function() {
  WSAIO.removeQueryString("test-mode", WSAIO.getParameterByName("test-mode")[0]);
  localStorage.removeItem("wsaio-app-mode");
  WSAIO.user_mode = "live";
  setTimeout(function() {
    window.location.href = "https://" + WSAIO.shopInfo.domain;
  }, 500);
};
window.wsaioHidePreview = function() {
  $(".wholesaleAllInOnePreview").hide();
};
WSAIO.addPreviewBar = function() {
  0 == $(".wholesaleAllInOnePreview").length && $("body").append('<div class="wholesaleAllInOnePreview" style="background-color: white;display: inline-block;width: 100%;padding: 13px 0px;box-shadow: rgba(0, 0, 0, 0.2) 0px -1px 3px;overflow: hidden;position: fixed;bottom: 0;left: 0;right: 0;z-index: 3147483648;opacity: 0.97;"><div style="float:left;display:inline-block;padding-left:20px"><p style="margin: 0px;color:black"><span><b>Wholesale All In One Preview: </b></span> Wholesale pricing are only visible to you. <a href="https://support.digitalcoo.com/hc/en-us/articles/360042800512"><u>Learn More</u></a></p></div><div style="float:right;display:inline-block;padding-right: 23px;"><button class="ws--preview-bar-btn" onclick="wsaioClosePreview();">Close Preview</button><button style="border:none;margin-left:.3rem;background:0 0;box-shadow:none;color:#007ace;font-size:14px;opacity:1" onclick="wsaioHidePreview();">Hide bar</button></div></div>');
};
var waioLoadScript = function(l, n) {
  var r = document.createElement("script");
  r.type = "text/javascript";
  r.readyState ? r.onreadystatechange = function() {
    if ("loaded" == r.readyState || "complete" == r.readyState) {
      r.onreadystatechange = null, n();
    }
  } : r.onload = function() {
    n();
  };
  r.src = l;
  document.getElementsByTagName("head")[0].appendChild(r);
};
"undefined" !== typeof WSAIO.getParameterByName("test-mode")[0] && (WSAIO.user_mode = "test", localStorage.setItem("wsaio-app-mode", "test"), WSAIO.addPreviewBar());
null !== localStorage.getItem("wsaio-app-mode") && WSAIO.addPreviewBar();
"live" === WSAIO.app_mode && !0 === WSAIO.disable_logs_when_live && (WSAIO.log = "", WSAIO.errorLog = "");
"live" === WSAIO.app_mode || WSAIO.app_mode === WSAIO.user_mode ? "undefined" === typeof jQuery || 1.7 > parseFloat(jQuery.fn.jquery) ? waioLoadScript("//ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js", function() {
  ws_load_app(jQuery.noConflict(!0));
}) : ws_load_app(jQuery) : (console.warn("WSAIO LOG!", "Application is disabled"), WSAIO = void 0, WSAIO_is_disabled = !0);
